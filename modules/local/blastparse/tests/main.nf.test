// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test blastparse
nextflow_process {

  name "Test Process BLASTPARSE"
  script "../main.nf"
  process "BLASTPARSE"

  tag "modules"
  tag "blastparse"

  // Real, tiny run (requires docker/conda)
  test("blastparse: blast6 + contigs + references") {
    options "--profile docker"
    when {
      process {
        """
        // Input signature:
        // tuple val(meta), path(blast_out), path(contigs)
        // path(references)
        // val(agens)

        input[0] = [
          [ id: 'toy' ],
          file("${projectDir}/modules/local/blastparse/tests/blastout.txt",       checkIfExists: true),
          file("${projectDir}/modules/local/blastparse/tests/Test.contigs.fa.gz", checkIfExists: true)
        ]
        input[1] = file("${projectDir}/modules/local/blastparse/tests/references.fa", checkIfExists: true)
        input[2] = 'HCV'
        """
      }
    }
    then {
      assertAll(
        { assert process.success },
        // Snapshot only what you care about
        { assert snapshot([
            blast_res: process.out.blast_res,
            csv      : process.out.csv,
            png      : process.out.png,
            versions : process.out.versions
          ]).match() }
      )
    }
  }

  // Stub run (fast)
  test("blastparse: stub") {
    options "-stub-run"
    when {
      process {
        """
        input[0] = [
          [ id: 'toy' ],
          file("${projectDir}/modules/local/blastparse/tests/blastout.txt",       checkIfExists: true),
          file("${projectDir}/modules/local/blastparse/tests/Test.contigs.fa.gz", checkIfExists: true)
        ]
        input[1] = file("${projectDir}/modules/local/blastparse/tests/references.fa", checkIfExists: true)
        input[2] = 'HCV'
        """
      }
    }
    then {
      assertAll(
        { assert process.success },
        { assert snapshot(process.out).match() }
      )
    }
  }
}
