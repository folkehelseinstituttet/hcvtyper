nextflow_process {

  name "Test Process PARSEFIRSTMAPPING"
  script "../main.nf"
  process "PARSEFIRSTMAPPING"

  tag "modules"
  tag "parsefirstmapping"

  // Real run with idxstats and depth files
  test("parsefirstmapping: idxstats + depth + references") {
    options "--profile docker"
    when {
      process {
        """
        // Input signature:
        // tuple val(meta), path(idxstats), path(depth)
        // path(references)

        input[0] = [
          [ id: 'Test_2' ],
          file("${projectDir}/modules/local/parsefirstmapping/tests/Test_2.firstmapping.withdup.idxstats", checkIfExists: true),
          file("${projectDir}/modules/local/parsefirstmapping/tests/Test_2.tsv", checkIfExists: true)
        ]
        input[1] = file("${projectDir}/modules/local/parsefirstmapping/tests/references.fa", checkIfExists: true)
        """
      }
    }
    then {
      assertAll(
        { assert process.success },
        { assert snapshot([
            csv        : process.out.csv,
            major_fasta: process.out.major_fasta,
            minor_fasta: process.out.minor_fasta,
            versions   : process.out.versions
          ]).match() }
      )
    }
  }

  // Fast stub run
  test("parsefirstmapping: stub") {
    options "-stub-run"
    when {
      process {
        """
        input[0] = [
          [ id: 'Test_2' ],
          file("${projectDir}/modules/local/parsefirstmapping/tests/Test_2.firstmapping.withdup.idxstats", checkIfExists: true),
          file("${projectDir}/modules/local/parsefirstmapping/tests/Test_2.tsv", checkIfExists: true)
        ]
        input[1] = file("${projectDir}/modules/local/parsefirstmapping/tests/references.fa", checkIfExists: true)
        """
      }
    }
    then {
      assertAll(
        { assert process.success },
        { assert snapshot([
            csv        : process.out.csv,
            major_fasta: process.out.major_fasta,
            minor_fasta: process.out.minor_fasta,
            versions   : process.out.versions
          ]).match() }
      )
    }
  }
}
