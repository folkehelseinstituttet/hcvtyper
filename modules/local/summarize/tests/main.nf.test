nextflow_process {

    name "Test Process SUMMARIZE"
    script "../main.nf"
    process "SUMMARIZE"

    tag "modules"
    tag "summarize"

    test("summarize: comprehensive summary") {
        options "--profile docker"
        when {
            process {
                """
                // Process inputs - using file() instead of directory paths to properly stage contents
                input[0] = file("${projectDir}/modules/local/summarize/tests/data/samplesheet.csv", checkIfExists: true)
                input[1] = 80    // stringency_1
                input[2] = 95    // stringency_2

                // Stage directory contents using file() with glob patterns
                input[3] = file("${projectDir}/modules/local/summarize/tests/data/trimmed/*", checkIfExists: true)
                input[4] = file("${projectDir}/modules/local/summarize/tests/data/kraken_classified/*", checkIfExists: true)
                input[5] = file("${projectDir}/modules/local/summarize/tests/data/parsefirst_mapping/*", checkIfExists: true)
                input[6] = file("${projectDir}/modules/local/summarize/tests/data/stats_withdup/*", checkIfExists: true)
                input[7] = file("${projectDir}/modules/local/summarize/tests/data/stats_markdup/*", checkIfExists: true)
                input[8] = file("${projectDir}/modules/local/summarize/tests/data/depth/*", checkIfExists: true)
                input[9] = file("${projectDir}/modules/local/summarize/tests/data/blast/*", checkIfExists: true)
                input[10] = file("${projectDir}/modules/local/summarize/tests/data/glue/*", checkIfExists: true)
                input[11] = file("${projectDir}/modules/local/summarize/tests/data/id/*", checkIfExists: true)
                input[12] = file("${projectDir}/modules/local/summarize/tests/data/variation/*", checkIfExists: true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot([
                    summary : process.out.summary,
                    mqc     : process.out.mqc,
                    png     : process.out.png,
                    versions: process.out.versions
                ]).match() }
            )
        }
    }

    test("summarize: stub") {
        options "-stub-run"
        when {
            process {
                """
                input[0] = file("${projectDir}/modules/local/summarize/tests/data/samplesheet.csv", checkIfExists: true)
                input[1] = 80
                input[2] = 95
                input[3] = file("${projectDir}/modules/local/summarize/tests/data/trimmed/*", checkIfExists: true)
                input[4] = file("${projectDir}/modules/local/summarize/tests/data/kraken_classified/*", checkIfExists: true)
                input[5] = file("${projectDir}/modules/local/summarize/tests/data/parsefirst_mapping/*", checkIfExists: true)
                input[6] = file("${projectDir}/modules/local/summarize/tests/data/stats_withdup/*", checkIfExists: true)
                input[7] = file("${projectDir}/modules/local/summarize/tests/data/stats_markdup/*", checkIfExists: true)
                input[8] = file("${projectDir}/modules/local/summarize/tests/data/depth/*", checkIfExists: true)
                input[9] = file("${projectDir}/modules/local/summarize/tests/data/blast/*", checkIfExists: true)
                input[10] = file("${projectDir}/modules/local/summarize/tests/data/glue/*", checkIfExists: true)
                input[11] = file("${projectDir}/modules/local/summarize/tests/data/id/*", checkIfExists: true)
                input[12] = file("${projectDir}/modules/local/summarize/tests/data/variation/*", checkIfExists: true)
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot([
                    summary : process.out.summary,
                    mqc     : process.out.mqc,
                    png     : process.out.png,
                    versions: process.out.versions
                ]).match() }
            )
        }
    }
}
