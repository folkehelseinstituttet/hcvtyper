/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    folkehelseinstituttet/hcvtyper Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    input                      = null
    platform                   = 'illumina'
    trimmer                    = 'fastp' // Options: 'fastp' or 'cutadapt'
    filter_low_complexity      = false // Filter low complexity reads with fastp
    agens                      = 'HCV'
    references                 = "https://raw.githubusercontent.com/folkehelseinstituttet/hcvtyper/test-datasets/blast_db/HCVgenosubtypes_8.5.19_clean.fa"
    kraken_focused_db          = 'https://raw.githubusercontent.com/folkehelseinstituttet/hcvtyper/test-datasets/kraken2/db_hepacivirus.tar.gz' // Database of only HCV reference sequences from NCBI
    kraken_all                 = true // Run Kraken2 against all species by default
    kraken_all_db              = 'https://genome-idx.s3.amazonaws.com/kraken/k2_pluspfp_08gb_20250402.tar.gz' // The PlusPFP-8 database created by Ben Langmead: https://benlangmead.github.io/aws-indexes/k2
    hcvglue_threshold          = 15 // Threshold for HCV GLUE resistance detection

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Illumina de novo assembly options
    spades_mode                = 'rnaviral'
    spades_hmm                 = null
    skip_assembly              = false

    // Illumina reference assembly options
    skip_hcvglue               = false

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null

    // Help and validation options
    showHidden                 = false

    // Enable help functionality
    help                       = false

    // Schema validation default options
    validate_params                  = true

}

// Validation configuration (for nf-core lint compatibility)
validation {
    help {
        enabled = true
    }
}

// Set default resource limits
process {
    resourceLimits = [
        cpus: 16,
        memory: '250.GB',
        time: '240.h'
    ]
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    server { includeConfig 'conf/server.config' }
    docker {
        docker.enabled         = true
//      docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.fixOwnership    = false
// userEmulation should be set to false on the local FHI server. I think setting to true is equivalent to:
// -u $(id -u) -e "HOME=${HOME}" -v /etc/passwd:/etc/passwd:ro -v /etc/shadow:/etc/shadow:ro -v /etc/group:/etc/group:ro -v $HOME:$HOME
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-schema@2.1.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')}.html"
}

manifest {
    name            = 'folkehelseinstituttet/hcvtyper'
    author          = """Jon BrÃ¥te"""
    homePage        = 'https://github.com/folkehelseinstituttet/hcvtyper'
    description     = """Assemble and genotype HCV genomes from NGS data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = 'v1.1.3-dev'  // Current release version
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load HCV-specific module configurations
includeConfig 'conf/modules_hcv.config'

